"use strict";angular.module("app.pouch",[]).service("Pouch",["$timeout","$localStorage",function($timeout,$localStorage){var service={db:new PouchDB("LocalDB"),remotedb:void 0,invokeApply:!0,settings:{database:void 0,username:void 0,password:void 0,stayConnected:void 0},status:{localChanges:0,changeEvents:{},replicationToEvents:{},replicationFromEvents:{}},session:{status:"offline",docsSent:0,docsReceived:0,currentRetryDelay:10,maxRetryDelay:6e5,retryDelayInc:1e3,lastConnectionAttempt:void 0,publishInProgress:!1},changes:void 0,replicationTo:void 0,replicationFrom:void 0,delayStatusPromise:void 0,retryPromise:void 0,publishPromise:void 0,init:function(){return this.loadSettings(),this.loadStatus(),this.trackChanges(),this.initRobustSync(1e3),[this.statusIcon(),this.statusTitle()]},incrementLocalChanges:function(){var self=this;"number"==typeof self.status.localChanges?self.status.localChanges++:self.status.localChanges=1,this.persistStatus()},resetLocalChanges:function(){this.status.localChanges=0,this.persistStatus()},storeChangeEvent:function(value,event){var self=this;"undefined"==typeof self.status.changeEvents&&(self.status.changeEvents={}),self.status.changeEvents[event]=value,self.persistStatus()},storeReplicationToEvent:function(value,event){var self=this;"undefined"==typeof self.status.replicationToEvents&&(self.status.replicationToEvents={}),self.status.replicationToEvents[event]=value,self.persistStatus()},storeReplicationFromEvent:function(value,event){var self=this;"undefined"==typeof self.status.replicationFromEvents&&(self.status.replicationFromEvents={}),self.status.replicationFromEvents[event]=value,self.persistStatus()},persistStatus:function(){$localStorage.pouchStatus=this.status},loadSettings:function(){"undefined"!=typeof $localStorage.pouchSettings&&(this.settings=$localStorage.pouchSettings)},loadStatus:function(){"undefined"!=typeof $localStorage.pouchStatus&&(this.status=$localStorage.pouchStatus)},publish:function(f){var self=this;self.session.publishInProgress=!1;var runFn=function(info){console.log(info),self.session.publishInProgress===!1&&(self.session.publishInProgress=!0,f().then(function(){$timeout(function(){self.session.publishInProgress=!1},0,self.invokeApply)}))};self.db.info(function(err,info){"undefined"!=typeof self.publishPromise&&"undefined"!=typeof self.publishPromise.cancel&&self.publishPromise.cancel(),self.publishPromise=self.db.changes({since:info.update_seq-1,live:!0}).on("change",runFn)}),runFn()},getSettings:function(){return this.settings},saveSettings:function(settings){this.settings=settings,$localStorage.pouchSettings=self.getSettings(),this.initRobustSync(1e3)},localChanges:function(){return"undefined"==typeof this.status?"undefined":this.status.localChanges},attemptConnection:function(){var self=this;self.session.lastConnectionAttempt=new Date,self.flashSessionStatus("connecting"),self.connect()},statusIcon:function(){switch(this.session.status){case"connecting":return"ion-ios7-cloudy-night-outline";case"online":return"ion-ios7-cloud-outline";case"offline":return"ion-ios7-cloudy-night";case"idle":return"ion-ios7-cloud-outline";case"receiving":return"ion-ios7-cloud-download-outline";case"sending":return"ion-ios7-cloud-upload-outline";default:return"ion-alert-circled"}},statusTitle:function(){switch(this.session.status){case"online":return"Connected";case"connecting":return"Trying to connect";case"offline":return"Not connected";case"idle":return"Connected";case"receiving":return"Receiving Data";case"sending":return"Sending Data";default:return"Unknown Status"}},reset:function(){var self=this;PouchDB.destroy("LocalDB").then(function(){$localStorage.pouchStatus={},$localStorage.session={},self.disconnect(),self.init()})},initRobustSync:function(delay){var self=this;self.session.currentRetryDelay=delay,self.cancelProgressiveRetry(),self.settings.stayConnected===!0&&self.progressiveRetry()},maxOutProgressiveDelay:function(){this.initRobustSync(this.session.maxRetryDelay)},restartProgressiveDelay:function(){"connecting"!==this.session.status&&"offline"!==this.session.status&&this.initRobustSync(1e3)},cancelProgressiveRetry:function(){var self=this;"object"==typeof self.retryPromise&&$timeout.cancel(self.retryPromise)},progressiveRetry:function(){var self=this;self.session.currentRetryDelay<self.session.maxRetryDelay&&(self.session.currentRetryDelay=self.session.currentRetryDelay+self.session.retryDelayInc),self.retryPromise=$timeout(function(){self.progressiveRetry(),self.attemptConnection()},self.session.currentRetryDelay,!1)},flashSessionStatus:function(status){var self=this,s=self.session.status;self.setSessionStatus(status),self.delaySessionStatus(2e3,s)},setSessionStatus:function(status){var self=this;self.cancelSessionStatus(),$timeout(function(){self.session.status=status},0,self.invokeApply)},delaySessionStatus:function(delay,status){var self=this;self.cancelSessionStatus(),self.delayStatusPromise=$timeout(function(){self.setSessionStatus(status)},delay,self.invokeApply)},cancelSessionStatus:function(){var self=this;"object"==typeof self.delayStatusPromise&&$timeout.cancel(self.delayStatusPromise)},trackChanges:function(){var self=this;"object"==typeof self.changes&&self.changes.cancel(),self.db.info().then(function(info){self.changes=self.db.changes({since:info.update_seq,live:!0}).on("change",function(info){self.handleChanges(info,"change")}).on("error",function(info){self.handleChanges(info,"error")}).on("complete",function(info){self.handleChanges(info,"complete")})})},handleChanges:function(info,event){var self=this;info.occurred_at=new Date,self.storeChangeEvent(info,event),"change"===event&&$timeout(function(){self.incrementLocalChanges()},0,self.invokeApply)},handleReplicationFrom:function(info,event){var self=this;switch(info.occurred_at=new Date,self.storeReplicationFromEvent(info,event),event){case"uptodate":self.maxOutProgressiveDelay(),self.delaySessionStatus(800,"idle");break;case"error":self.restartProgressiveDelay(),self.delaySessionStatus(800,"offline");break;case"complete":break;case"change":self.maxOutProgressiveDelay(),info.docs_written>self.session.docsReceived&&(self.session.docsReceived=info.docs_written,self.setSessionStatus("receiving"))}},handleReplicationTo:function(info,event){var self=this;switch(event){case"uptodate":self.maxOutProgressiveDelay(),self.resetLocalChanges(),self.delaySessionStatus(800,"idle");break;case"error":self.restartProgressiveDelay(),self.delaySessionStatus(800,"offline");break;case"complete":break;case"change":self.maxOutProgressiveDelay(),info.docs_written>self.session.docsSent&&(self.session.docsSent=info.docs_written,self.setSessionStatus("sending"))}info.occurred_at=new Date,this.storeReplicationToEvent(info,event)},disconnect:function(){var self=this;"object"==typeof self.replicationTo&&self.replicationTo.cancel(),"object"==typeof self.replicationFrom&&self.replicationFrom.cancel()},createRemoteDb:function(){var self=this;"string"==typeof self.settings.database&&(self.remotedb=new PouchDB(this.settings.database))},connect:function(){var self=this;self.session.docsSent=0,self.session.docsReceived=0,self.disconnect(),self.createRemoteDb(),self.session.replicationTo=self.db.replicate.to(self.remotedb,{live:!0}).on("change",function(info){self.handleReplicationTo(info,"change")}).on("uptodate",function(info){self.handleReplicationTo(info,"uptodate")}).on("error",function(info){self.handleReplicationTo(info,"error")}).on("complete",function(info){self.handleReplicationTo(info,"complete")}),self.session.replicationFrom=self.db.replicate.from(self.remotedb,{live:!0}).on("change",function(info){self.handleReplicationFrom(info,"change")}).on("uptodate",function(info){self.handleReplicationFrom(info,"uptodate")}).on("error",function(info){self.handleReplicationFrom(info,"error")}).on("complete",function(info){self.handleReplicationFrom(info,"complete")})}};return service.init(),service}]),angular.module("app.pouch_controller",[]).config(["$stateProvider",function($stateProvider){$stateProvider.state("tabs.pouch",{url:"/pouch/index",views:{"pouch-tab":{templateUrl:"states/pouch/index.html",controller:"PouchIndexCtrl"}}})}]).controller("PouchIndexCtrl",["$scope","$stateParams","$timeout","$ionicLoading","Pouch",function($scope,$stateParams,$timeout,$ionicLoading,Pouch){$scope.settings=Pouch.settings,$scope.Pouch=Pouch,$scope.reset=function(){$ionicLoading.show({template:"You should restart the app."}),Pouch.reset()},$scope.save=function(settings){$ionicLoading.show({template:'Saving Settings <i class="ion-loading-c" />'}),Pouch.saveSettings(settings),$timeout(function(){$ionicLoading.hide()},300)}}]),angular.module("app.tabs_controller",[]).config(["$stateProvider",function($stateProvider){$stateProvider.state("tabs",{url:"/tabs",controller:"TabsController",templateUrl:"states/tabs/index.html"})}]).controller("TabsController",["$scope","Pouch",function($scope,Pouch){$scope.pouch=Pouch}]),angular.module("app.todo",[]).service("Todo",["Pouch","rfc4122","$rootScope",function(Pouch,rfc4122){var recentTodos={_id:"_design/recentTodos",views:{recentTodos:{map:function(doc){"todo"===doc.doc_type&&emit(doc.created_at,doc._id)}.toString()}}};return Pouch.db.put(recentTodos),{add:function(obj){return obj._id="todo_"+rfc4122.v4(),obj.doc_type="todo",obj.created_at=new Date,Pouch.db.put(obj)},all:function(){var allTodos=function(doc){"todo"===doc.doc_type&&emit(doc.created_at,doc._id)};return Pouch.db.query(allTodos,{descending:!0,include_docs:!0})}}}]),angular.module("app.todos_controller",[]).config(["$stateProvider",function($stateProvider){$stateProvider.state("tabs.todos",{url:"/todos/index",views:{"todos-tab":{templateUrl:"states/todos/index.html",controller:"TodosIndexCtrl as todosIndex"}}}).state("tabs.todos_edit",{url:"/todos/edit/:id",views:{"todos-tab":{templateUrl:"states/todos/edit.html",controller:"TodosEditCtrl"}}})}]).controller("TodosIndexCtrl",["$scope","Todo","Pouch",function($scope,Todo,Pouch){var self=this;self.form={},self.todos=[],self.loading=!0,Pouch.publish(function(){return Pouch.db.query("recentTodos",{descending:!0,include_docs:!0}).then(function(results){self.loading=!1,self.inserting=!1,self.todos=results.rows})}),this.add=function(form){self.inserting=form.title,Todo.add(form),self.form={}}}]).controller("TodosEditCtrl",["$scope","$ionicNavBarDelegate","$stateParams","$ionicLoading","Todo","Pouch","$timeout",function($scope,$ionicNavBarDelegate,$stateParams,$ionicLoading,Todo,Pouch,$timeout){$scope.todo={},Pouch.db.get($stateParams.id).then(function(result){$timeout(function(){$scope.todo=result})}),$scope.save=function(todo){$ionicLoading.show({template:'Saving Todo Item <i class="ion-loading-c" />'}),Pouch.db.put(todo).then(function(){$ionicLoading.hide(),$ionicNavBarDelegate.back()})}}]);